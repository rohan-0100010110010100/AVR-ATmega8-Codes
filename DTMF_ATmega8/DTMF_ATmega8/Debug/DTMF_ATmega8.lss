
DTMF_ATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053f  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e7  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	33 d0       	rcall	.+102    	; 0x9a <main>
  34:	02 c2       	rjmp	.+1028   	; 0x43a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <wait>:
#include<avr/io.h>
#include<util/delay.h>


void wait(float sec)
{
  38:	cf 92       	push	r12
  3a:	df 92       	push	r13
  3c:	ef 92       	push	r14
  3e:	ff 92       	push	r15
  40:	0f 93       	push	r16
  42:	1f 93       	push	r17
  44:	cf 93       	push	r28
  46:	df 93       	push	r29
	for(int i=0;i<(int)46*sec;i++)
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	48 e3       	ldi	r20, 0x38	; 56
  4e:	52 e4       	ldi	r21, 0x42	; 66
  50:	40 d1       	rcall	.+640    	; 0x2d2 <__mulsf3>
  52:	6b 01       	movw	r12, r22
  54:	7c 01       	movw	r14, r24
  56:	20 e0       	ldi	r18, 0x00	; 0
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	a9 01       	movw	r20, r18
  5c:	36 d1       	rcall	.+620    	; 0x2ca <__gesf2>
  5e:	18 16       	cp	r1, r24
  60:	9c f4       	brge	.+38     	; 0x88 <__SREG__+0x49>
  62:	c0 e0       	ldi	r28, 0x00	; 0
  64:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  66:	00 e0       	ldi	r16, 0x00	; 0
  68:	10 e0       	ldi	r17, 0x00	; 0
  6a:	c8 01       	movw	r24, r16
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <__SREG__+0x2d>
  70:	21 96       	adiw	r28, 0x01	; 1
  72:	be 01       	movw	r22, r28
  74:	0d 2e       	mov	r0, r29
  76:	00 0c       	add	r0, r0
  78:	88 0b       	sbc	r24, r24
  7a:	99 0b       	sbc	r25, r25
  7c:	c7 d0       	rcall	.+398    	; 0x20c <__floatsisf>
  7e:	a7 01       	movw	r20, r14
  80:	96 01       	movw	r18, r12
  82:	be d0       	rcall	.+380    	; 0x200 <__cmpsf2>
  84:	88 23       	and	r24, r24
  86:	8c f3       	brlt	.-30     	; 0x6a <__SREG__+0x2b>
	_delay_loop_2(0);
}
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	1f 91       	pop	r17
  8e:	0f 91       	pop	r16
  90:	ff 90       	pop	r15
  92:	ef 90       	pop	r14
  94:	df 90       	pop	r13
  96:	cf 90       	pop	r12
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
int d=0;
int b=0;      
DDRB=0b00011110;  //PB1, PB2, PB3, PB4 as output bits connected to motors and PB0 as input bit connected to DTMF decoder IC
  9a:	8e e1       	ldi	r24, 0x1E	; 30
  9c:	87 bb       	out	0x17, r24	; 23
DDRD=0b00010000;  //PD7, PD6, PD5 connected to DTMF decoder IC hence input bits and 
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	81 bb       	out	0x11, r24	; 17
wait(10);
}  

if(d==0b00100000 && b==0b00000001)			// if key 9 of cell phone 
{
PORTB=0b00000100;	// right turn in backward direction
  a2:	68 94       	set
  a4:	aa 24       	eor	r10, r10
  a6:	a2 f8       	bld	r10, 2
PORTD = (1<<4);
  a8:	68 94       	set
  aa:	ff 24       	eor	r15, r15
  ac:	f4 f8       	bld	r15, 4
wait(0.5);
PORTB=0b00001100;	// move back
  ae:	0f 2e       	mov	r0, r31
  b0:	fc e0       	ldi	r31, 0x0C	; 12
  b2:	df 2e       	mov	r13, r31
  b4:	f0 2d       	mov	r31, r0
wait(10);
}    

if(d==0b11000000 && b==0b00000001)			// if key 7 of cell phone pressed
{
PORTB=0b00001000;	// left turn in backward direction
  b6:	68 94       	set
  b8:	bb 24       	eor	r11, r11
  ba:	b3 f8       	bld	r11, 3
wait(10);
}

if(d==0b10000000 && b==0b00000001)			// if key 3 of cell phone pressed
{
PORTB=0b00000010;	// right turn
  bc:	68 94       	set
  be:	cc 24       	eor	r12, r12
  c0:	c1 f8       	bld	r12, 1
PORTD = (1<<4);
wait(0.5);
PORTB=0b00010010;	// move forward
  c2:	0f 2e       	mov	r0, r31
  c4:	f2 e1       	ldi	r31, 0x12	; 18
  c6:	ef 2e       	mov	r14, r31
  c8:	f0 2d       	mov	r31, r0
DDRD=0b00010000;  //PD7, PD6, PD5 connected to DTMF decoder IC hence input bits and 
				  //PD4 connected to buzzer hence output bit.

while(1)          // infinite loop
{
b=PINB&0b00000001;
  ca:	86 b3       	in	r24, 0x16	; 22
  cc:	08 2f       	mov	r16, r24
  ce:	01 70       	andi	r16, 0x01	; 1
  d0:	10 e0       	ldi	r17, 0x00	; 0
d=PIND&0b11100000; 
  d2:	c0 b3       	in	r28, 0x10	; 16
  d4:	c0 7e       	andi	r28, 0xE0	; 224
  d6:	d0 e0       	ldi	r29, 0x00	; 0
PORTD &= ~(1<<4);
  d8:	94 98       	cbi	0x12, 4	; 18

if(d==0b10000000 && b==0b00000000)          //if Key 2 of cell phone pressed
  da:	c0 38       	cpi	r28, 0x80	; 128
  dc:	d1 05       	cpc	r29, r1
  de:	29 f4       	brne	.+10     	; 0xea <main+0x50>
  e0:	01 15       	cp	r16, r1
  e2:	11 05       	cpc	r17, r1
  e4:	51 f5       	brne	.+84     	; 0x13a <main+0xa0>
{
PORTB=0b00010010;    // move straight
  e6:	e8 ba       	out	0x18, r14	; 24
  e8:	28 c0       	rjmp	.+80     	; 0x13a <main+0xa0>
}

if(d==0b01000000 && b==0b00000000)          // if Key 4 of cell phone pressed
  ea:	c0 34       	cpi	r28, 0x40	; 64
  ec:	d1 05       	cpc	r29, r1
  ee:	89 f4       	brne	.+34     	; 0x112 <main+0x78>
  f0:	01 15       	cp	r16, r1
  f2:	11 05       	cpc	r17, r1
  f4:	51 f5       	brne	.+84     	; 0x14a <main+0xb0>
{
PORTB=0b000010000;    // turn left
  f6:	f8 ba       	out	0x18, r15	; 24
PORTD = (1<<4);
  f8:	f2 ba       	out	0x12, r15	; 18
wait(0.2);
  fa:	6d ec       	ldi	r22, 0xCD	; 205
  fc:	7c ec       	ldi	r23, 0xCC	; 204
  fe:	8c e4       	ldi	r24, 0x4C	; 76
 100:	9e e3       	ldi	r25, 0x3E	; 62
 102:	9a df       	rcall	.-204    	; 0x38 <wait>
PORTD &= ~(1<<4);
 104:	94 98       	cbi	0x12, 4	; 18
wait(0.2);
 106:	6d ec       	ldi	r22, 0xCD	; 205
 108:	7c ec       	ldi	r23, 0xCC	; 204
 10a:	8c e4       	ldi	r24, 0x4C	; 76
 10c:	9e e3       	ldi	r25, 0x3E	; 62
 10e:	94 df       	rcall	.-216    	; 0x38 <wait>
 110:	1c c0       	rjmp	.+56     	; 0x14a <main+0xb0>
}

if(d==0b11000000 && b==0b00000000)          // if Key 6 of cell phone pressed
 112:	c0 3c       	cpi	r28, 0xC0	; 192
 114:	d1 05       	cpc	r29, r1
 116:	89 f4       	brne	.+34     	; 0x13a <main+0xa0>
 118:	01 15       	cp	r16, r1
 11a:	11 05       	cpc	r17, r1
 11c:	49 f5       	brne	.+82     	; 0x170 <main+0xd6>
{
PORTB=0b00000010;   // turn right
 11e:	c8 ba       	out	0x18, r12	; 24
PORTD = (1<<4);
 120:	f2 ba       	out	0x12, r15	; 18
wait(0.2);
 122:	6d ec       	ldi	r22, 0xCD	; 205
 124:	7c ec       	ldi	r23, 0xCC	; 204
 126:	8c e4       	ldi	r24, 0x4C	; 76
 128:	9e e3       	ldi	r25, 0x3E	; 62
 12a:	86 df       	rcall	.-244    	; 0x38 <wait>
PORTD &= ~(1<<4);
 12c:	94 98       	cbi	0x12, 4	; 18
wait(0.2);
 12e:	6d ec       	ldi	r22, 0xCD	; 205
 130:	7c ec       	ldi	r23, 0xCC	; 204
 132:	8c e4       	ldi	r24, 0x4C	; 76
 134:	9e e3       	ldi	r25, 0x3E	; 62
 136:	80 df       	rcall	.-256    	; 0x38 <wait>
 138:	1b c0       	rjmp	.+54     	; 0x170 <main+0xd6>
}

if(d==0b00100000 && b==0b00000000)          // if Key 8 of cell phone pressed
 13a:	c0 32       	cpi	r28, 0x20	; 32
 13c:	d1 05       	cpc	r29, r1
 13e:	29 f4       	brne	.+10     	; 0x14a <main+0xb0>
 140:	01 15       	cp	r16, r1
 142:	11 05       	cpc	r17, r1
 144:	49 f5       	brne	.+82     	; 0x198 <main+0xfe>
{
PORTB=0b00001100;    // move back
 146:	d8 ba       	out	0x18, r13	; 24
 148:	27 c0       	rjmp	.+78     	; 0x198 <main+0xfe>
}

if(d==0b00000000 && b==0b00000001)			// if key 1 of cell phone pressed
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	89 f4       	brne	.+34     	; 0x170 <main+0xd6>
 14e:	01 30       	cpi	r16, 0x01	; 1
 150:	11 05       	cpc	r17, r1
 152:	b9 f5       	brne	.+110    	; 0x1c2 <main+0x128>
{
PORTB=0b000010000;	// left turn
 154:	f8 ba       	out	0x18, r15	; 24
PORTD = (1<<4);
 156:	f2 ba       	out	0x12, r15	; 18
wait(0.5);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	9f e3       	ldi	r25, 0x3F	; 63
 160:	6b df       	rcall	.-298    	; 0x38 <wait>
PORTB=0b00010010;	// move forward                                        
 162:	e8 ba       	out	0x18, r14	; 24
wait(10);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	91 e4       	ldi	r25, 0x41	; 65
 16c:	65 df       	rcall	.-310    	; 0x38 <wait>
 16e:	29 c0       	rjmp	.+82     	; 0x1c2 <main+0x128>
}

if(d==0b10000000 && b==0b00000001)			// if key 3 of cell phone pressed
 170:	c0 38       	cpi	r28, 0x80	; 128
 172:	d1 05       	cpc	r29, r1
 174:	89 f4       	brne	.+34     	; 0x198 <main+0xfe>
 176:	01 30       	cpi	r16, 0x01	; 1
 178:	11 05       	cpc	r17, r1
 17a:	c1 f5       	brne	.+112    	; 0x1ec <main+0x152>
{
PORTB=0b00000010;	// right turn
 17c:	c8 ba       	out	0x18, r12	; 24
PORTD = (1<<4);
 17e:	f2 ba       	out	0x12, r15	; 18
wait(0.5);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	9f e3       	ldi	r25, 0x3F	; 63
 188:	57 df       	rcall	.-338    	; 0x38 <wait>
PORTB=0b00010010;	// move forward
 18a:	e8 ba       	out	0x18, r14	; 24
wait(10);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	91 e4       	ldi	r25, 0x41	; 65
 194:	51 df       	rcall	.-350    	; 0x38 <wait>
 196:	2a c0       	rjmp	.+84     	; 0x1ec <main+0x152>
}    

if(d==0b11000000 && b==0b00000001)			// if key 7 of cell phone pressed
 198:	c0 3c       	cpi	r28, 0xC0	; 192
 19a:	d1 05       	cpc	r29, r1
 19c:	91 f4       	brne	.+36     	; 0x1c2 <main+0x128>
 19e:	01 30       	cpi	r16, 0x01	; 1
 1a0:	11 05       	cpc	r17, r1
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <main+0x10c>
 1a4:	92 cf       	rjmp	.-220    	; 0xca <main+0x30>
{
PORTB=0b00001000;	// left turn in backward direction
 1a6:	b8 ba       	out	0x18, r11	; 24
PORTD = (1<<4);
 1a8:	f2 ba       	out	0x12, r15	; 18
wait(0.5);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	42 df       	rcall	.-380    	; 0x38 <wait>
PORTB=0b00001100;	// move back
 1b4:	d8 ba       	out	0x18, r13	; 24
wait(10);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	91 e4       	ldi	r25, 0x41	; 65
 1be:	3c df       	rcall	.-392    	; 0x38 <wait>
 1c0:	84 cf       	rjmp	.-248    	; 0xca <main+0x30>
}  

if(d==0b00100000 && b==0b00000001)			// if key 9 of cell phone 
 1c2:	c0 32       	cpi	r28, 0x20	; 32
 1c4:	d1 05       	cpc	r29, r1
 1c6:	91 f4       	brne	.+36     	; 0x1ec <main+0x152>
 1c8:	01 30       	cpi	r16, 0x01	; 1
 1ca:	11 05       	cpc	r17, r1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <main+0x136>
 1ce:	7d cf       	rjmp	.-262    	; 0xca <main+0x30>
{
PORTB=0b00000100;	// right turn in backward direction
 1d0:	a8 ba       	out	0x18, r10	; 24
PORTD = (1<<4);
 1d2:	f2 ba       	out	0x12, r15	; 18
wait(0.5);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	9f e3       	ldi	r25, 0x3F	; 63
 1dc:	2d df       	rcall	.-422    	; 0x38 <wait>
PORTB=0b00001100;	// move back
 1de:	d8 ba       	out	0x18, r13	; 24
wait(10);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	91 e4       	ldi	r25, 0x41	; 65
 1e8:	27 df       	rcall	.-434    	; 0x38 <wait>
 1ea:	6f cf       	rjmp	.-290    	; 0xca <main+0x30>
}  

if(d==0b01000000 && b==0b00000001)          // if Key 5 of cell phone pressed
 1ec:	c0 34       	cpi	r28, 0x40	; 64
 1ee:	d1 05       	cpc	r29, r1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <main+0x15a>
 1f2:	6b cf       	rjmp	.-298    	; 0xca <main+0x30>
 1f4:	01 30       	cpi	r16, 0x01	; 1
 1f6:	11 05       	cpc	r17, r1
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0x162>
 1fa:	67 cf       	rjmp	.-306    	; 0xca <main+0x30>
{
PORTB=0b00000000;    //stop
 1fc:	18 ba       	out	0x18, r1	; 24
 1fe:	65 cf       	rjmp	.-310    	; 0xca <main+0x30>

00000200 <__cmpsf2>:
 200:	40 d0       	rcall	.+128    	; 0x282 <__fp_cmp>
 202:	08 f4       	brcc	.+2      	; 0x206 <__cmpsf2+0x6>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret

00000208 <__floatunsisf>:
 208:	e8 94       	clt
 20a:	09 c0       	rjmp	.+18     	; 0x21e <__floatsisf+0x12>

0000020c <__floatsisf>:
 20c:	97 fb       	bst	r25, 7
 20e:	3e f4       	brtc	.+14     	; 0x21e <__floatsisf+0x12>
 210:	90 95       	com	r25
 212:	80 95       	com	r24
 214:	70 95       	com	r23
 216:	61 95       	neg	r22
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	8f 4f       	sbci	r24, 0xFF	; 255
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	99 23       	and	r25, r25
 220:	a9 f0       	breq	.+42     	; 0x24c <__floatsisf+0x40>
 222:	f9 2f       	mov	r31, r25
 224:	96 e9       	ldi	r25, 0x96	; 150
 226:	bb 27       	eor	r27, r27
 228:	93 95       	inc	r25
 22a:	f6 95       	lsr	r31
 22c:	87 95       	ror	r24
 22e:	77 95       	ror	r23
 230:	67 95       	ror	r22
 232:	b7 95       	ror	r27
 234:	f1 11       	cpse	r31, r1
 236:	f8 cf       	rjmp	.-16     	; 0x228 <__floatsisf+0x1c>
 238:	fa f4       	brpl	.+62     	; 0x278 <__floatsisf+0x6c>
 23a:	bb 0f       	add	r27, r27
 23c:	11 f4       	brne	.+4      	; 0x242 <__floatsisf+0x36>
 23e:	60 ff       	sbrs	r22, 0
 240:	1b c0       	rjmp	.+54     	; 0x278 <__floatsisf+0x6c>
 242:	6f 5f       	subi	r22, 0xFF	; 255
 244:	7f 4f       	sbci	r23, 0xFF	; 255
 246:	8f 4f       	sbci	r24, 0xFF	; 255
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	16 c0       	rjmp	.+44     	; 0x278 <__floatsisf+0x6c>
 24c:	88 23       	and	r24, r24
 24e:	11 f0       	breq	.+4      	; 0x254 <__floatsisf+0x48>
 250:	96 e9       	ldi	r25, 0x96	; 150
 252:	11 c0       	rjmp	.+34     	; 0x276 <__floatsisf+0x6a>
 254:	77 23       	and	r23, r23
 256:	21 f0       	breq	.+8      	; 0x260 <__floatsisf+0x54>
 258:	9e e8       	ldi	r25, 0x8E	; 142
 25a:	87 2f       	mov	r24, r23
 25c:	76 2f       	mov	r23, r22
 25e:	05 c0       	rjmp	.+10     	; 0x26a <__floatsisf+0x5e>
 260:	66 23       	and	r22, r22
 262:	71 f0       	breq	.+28     	; 0x280 <__floatsisf+0x74>
 264:	96 e8       	ldi	r25, 0x86	; 134
 266:	86 2f       	mov	r24, r22
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	2a f0       	brmi	.+10     	; 0x278 <__floatsisf+0x6c>
 26e:	9a 95       	dec	r25
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	88 1f       	adc	r24, r24
 276:	da f7       	brpl	.-10     	; 0x26e <__floatsisf+0x62>
 278:	88 0f       	add	r24, r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	97 f9       	bld	r25, 7
 280:	08 95       	ret

00000282 <__fp_cmp>:
 282:	99 0f       	add	r25, r25
 284:	00 08       	sbc	r0, r0
 286:	55 0f       	add	r21, r21
 288:	aa 0b       	sbc	r26, r26
 28a:	e0 e8       	ldi	r30, 0x80	; 128
 28c:	fe ef       	ldi	r31, 0xFE	; 254
 28e:	16 16       	cp	r1, r22
 290:	17 06       	cpc	r1, r23
 292:	e8 07       	cpc	r30, r24
 294:	f9 07       	cpc	r31, r25
 296:	c0 f0       	brcs	.+48     	; 0x2c8 <__fp_cmp+0x46>
 298:	12 16       	cp	r1, r18
 29a:	13 06       	cpc	r1, r19
 29c:	e4 07       	cpc	r30, r20
 29e:	f5 07       	cpc	r31, r21
 2a0:	98 f0       	brcs	.+38     	; 0x2c8 <__fp_cmp+0x46>
 2a2:	62 1b       	sub	r22, r18
 2a4:	73 0b       	sbc	r23, r19
 2a6:	84 0b       	sbc	r24, r20
 2a8:	95 0b       	sbc	r25, r21
 2aa:	39 f4       	brne	.+14     	; 0x2ba <__fp_cmp+0x38>
 2ac:	0a 26       	eor	r0, r26
 2ae:	61 f0       	breq	.+24     	; 0x2c8 <__fp_cmp+0x46>
 2b0:	23 2b       	or	r18, r19
 2b2:	24 2b       	or	r18, r20
 2b4:	25 2b       	or	r18, r21
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <__fp_cmp+0x3e>
 2b8:	08 95       	ret
 2ba:	0a 26       	eor	r0, r26
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <__fp_cmp+0x3e>
 2be:	a1 40       	sbci	r26, 0x01	; 1
 2c0:	a6 95       	lsr	r26
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	81 1d       	adc	r24, r1
 2c6:	81 1d       	adc	r24, r1
 2c8:	08 95       	ret

000002ca <__gesf2>:
 2ca:	db df       	rcall	.-74     	; 0x282 <__fp_cmp>
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <__gesf2+0x6>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	08 95       	ret

000002d2 <__mulsf3>:
 2d2:	0b d0       	rcall	.+22     	; 0x2ea <__mulsf3x>
 2d4:	78 c0       	rjmp	.+240    	; 0x3c6 <__fp_round>
 2d6:	69 d0       	rcall	.+210    	; 0x3aa <__fp_pscA>
 2d8:	28 f0       	brcs	.+10     	; 0x2e4 <__mulsf3+0x12>
 2da:	6e d0       	rcall	.+220    	; 0x3b8 <__fp_pscB>
 2dc:	18 f0       	brcs	.+6      	; 0x2e4 <__mulsf3+0x12>
 2de:	95 23       	and	r25, r21
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <__mulsf3+0x12>
 2e2:	5a c0       	rjmp	.+180    	; 0x398 <__fp_inf>
 2e4:	5f c0       	rjmp	.+190    	; 0x3a4 <__fp_nan>
 2e6:	11 24       	eor	r1, r1
 2e8:	a2 c0       	rjmp	.+324    	; 0x42e <__fp_szero>

000002ea <__mulsf3x>:
 2ea:	7e d0       	rcall	.+252    	; 0x3e8 <__fp_split3>
 2ec:	a0 f3       	brcs	.-24     	; 0x2d6 <__mulsf3+0x4>

000002ee <__mulsf3_pse>:
 2ee:	95 9f       	mul	r25, r21
 2f0:	d1 f3       	breq	.-12     	; 0x2e6 <__mulsf3+0x14>
 2f2:	95 0f       	add	r25, r21
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	55 1f       	adc	r21, r21
 2f8:	62 9f       	mul	r22, r18
 2fa:	f0 01       	movw	r30, r0
 2fc:	72 9f       	mul	r23, r18
 2fe:	bb 27       	eor	r27, r27
 300:	f0 0d       	add	r31, r0
 302:	b1 1d       	adc	r27, r1
 304:	63 9f       	mul	r22, r19
 306:	aa 27       	eor	r26, r26
 308:	f0 0d       	add	r31, r0
 30a:	b1 1d       	adc	r27, r1
 30c:	aa 1f       	adc	r26, r26
 30e:	64 9f       	mul	r22, r20
 310:	66 27       	eor	r22, r22
 312:	b0 0d       	add	r27, r0
 314:	a1 1d       	adc	r26, r1
 316:	66 1f       	adc	r22, r22
 318:	82 9f       	mul	r24, r18
 31a:	22 27       	eor	r18, r18
 31c:	b0 0d       	add	r27, r0
 31e:	a1 1d       	adc	r26, r1
 320:	62 1f       	adc	r22, r18
 322:	73 9f       	mul	r23, r19
 324:	b0 0d       	add	r27, r0
 326:	a1 1d       	adc	r26, r1
 328:	62 1f       	adc	r22, r18
 32a:	83 9f       	mul	r24, r19
 32c:	a0 0d       	add	r26, r0
 32e:	61 1d       	adc	r22, r1
 330:	22 1f       	adc	r18, r18
 332:	74 9f       	mul	r23, r20
 334:	33 27       	eor	r19, r19
 336:	a0 0d       	add	r26, r0
 338:	61 1d       	adc	r22, r1
 33a:	23 1f       	adc	r18, r19
 33c:	84 9f       	mul	r24, r20
 33e:	60 0d       	add	r22, r0
 340:	21 1d       	adc	r18, r1
 342:	82 2f       	mov	r24, r18
 344:	76 2f       	mov	r23, r22
 346:	6a 2f       	mov	r22, r26
 348:	11 24       	eor	r1, r1
 34a:	9f 57       	subi	r25, 0x7F	; 127
 34c:	50 40       	sbci	r21, 0x00	; 0
 34e:	8a f0       	brmi	.+34     	; 0x372 <__mulsf3_pse+0x84>
 350:	e1 f0       	breq	.+56     	; 0x38a <__mulsf3_pse+0x9c>
 352:	88 23       	and	r24, r24
 354:	4a f0       	brmi	.+18     	; 0x368 <__mulsf3_pse+0x7a>
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	bb 1f       	adc	r27, r27
 35c:	66 1f       	adc	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	88 1f       	adc	r24, r24
 362:	91 50       	subi	r25, 0x01	; 1
 364:	50 40       	sbci	r21, 0x00	; 0
 366:	a9 f7       	brne	.-22     	; 0x352 <__mulsf3_pse+0x64>
 368:	9e 3f       	cpi	r25, 0xFE	; 254
 36a:	51 05       	cpc	r21, r1
 36c:	70 f0       	brcs	.+28     	; 0x38a <__mulsf3_pse+0x9c>
 36e:	14 c0       	rjmp	.+40     	; 0x398 <__fp_inf>
 370:	5e c0       	rjmp	.+188    	; 0x42e <__fp_szero>
 372:	5f 3f       	cpi	r21, 0xFF	; 255
 374:	ec f3       	brlt	.-6      	; 0x370 <__mulsf3_pse+0x82>
 376:	98 3e       	cpi	r25, 0xE8	; 232
 378:	dc f3       	brlt	.-10     	; 0x370 <__mulsf3_pse+0x82>
 37a:	86 95       	lsr	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f7 95       	ror	r31
 384:	e7 95       	ror	r30
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	c1 f7       	brne	.-16     	; 0x37a <__mulsf3_pse+0x8c>
 38a:	fe 2b       	or	r31, r30
 38c:	88 0f       	add	r24, r24
 38e:	91 1d       	adc	r25, r1
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	97 f9       	bld	r25, 7
 396:	08 95       	ret

00000398 <__fp_inf>:
 398:	97 f9       	bld	r25, 7
 39a:	9f 67       	ori	r25, 0x7F	; 127
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <__fp_nan>:
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	08 95       	ret

000003aa <__fp_pscA>:
 3aa:	00 24       	eor	r0, r0
 3ac:	0a 94       	dec	r0
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	09 06       	cpc	r0, r25
 3b6:	08 95       	ret

000003b8 <__fp_pscB>:
 3b8:	00 24       	eor	r0, r0
 3ba:	0a 94       	dec	r0
 3bc:	12 16       	cp	r1, r18
 3be:	13 06       	cpc	r1, r19
 3c0:	14 06       	cpc	r1, r20
 3c2:	05 06       	cpc	r0, r21
 3c4:	08 95       	ret

000003c6 <__fp_round>:
 3c6:	09 2e       	mov	r0, r25
 3c8:	03 94       	inc	r0
 3ca:	00 0c       	add	r0, r0
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <__fp_round+0xc>
 3ce:	88 23       	and	r24, r24
 3d0:	52 f0       	brmi	.+20     	; 0x3e6 <__fp_round+0x20>
 3d2:	bb 0f       	add	r27, r27
 3d4:	40 f4       	brcc	.+16     	; 0x3e6 <__fp_round+0x20>
 3d6:	bf 2b       	or	r27, r31
 3d8:	11 f4       	brne	.+4      	; 0x3de <__fp_round+0x18>
 3da:	60 ff       	sbrs	r22, 0
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <__fp_round+0x20>
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <__fp_split3>:
 3e8:	57 fd       	sbrc	r21, 7
 3ea:	90 58       	subi	r25, 0x80	; 128
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	59 f0       	breq	.+22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f2:	5f 3f       	cpi	r21, 0xFF	; 255
 3f4:	71 f0       	breq	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f6:	47 95       	ror	r20

000003f8 <__fp_splitA>:
 3f8:	88 0f       	add	r24, r24
 3fa:	97 fb       	bst	r25, 7
 3fc:	99 1f       	adc	r25, r25
 3fe:	61 f0       	breq	.+24     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 400:	9f 3f       	cpi	r25, 0xFF	; 255
 402:	79 f0       	breq	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 404:	87 95       	ror	r24
 406:	08 95       	ret
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	55 1f       	adc	r21, r21
 410:	f2 cf       	rjmp	.-28     	; 0x3f6 <__fp_split3+0xe>
 412:	46 95       	lsr	r20
 414:	f1 df       	rcall	.-30     	; 0x3f8 <__fp_splitA>
 416:	08 c0       	rjmp	.+16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 418:	16 16       	cp	r1, r22
 41a:	17 06       	cpc	r1, r23
 41c:	18 06       	cpc	r1, r24
 41e:	99 1f       	adc	r25, r25
 420:	f1 cf       	rjmp	.-30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 422:	86 95       	lsr	r24
 424:	71 05       	cpc	r23, r1
 426:	61 05       	cpc	r22, r1
 428:	08 94       	sec
 42a:	08 95       	ret

0000042c <__fp_zero>:
 42c:	e8 94       	clt

0000042e <__fp_szero>:
 42e:	bb 27       	eor	r27, r27
 430:	66 27       	eor	r22, r22
 432:	77 27       	eor	r23, r23
 434:	cb 01       	movw	r24, r22
 436:	97 f9       	bld	r25, 7
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
